// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id               String   @id
  name             String
  age              Int
  medicalHistory   String   @default("")
  eatingHabits     String

  dietId           String?
  diet             Diet?    @relation(fields: [dietId], references: [id])

  mealLogs        MealLog[]
  alarms          Alarm[]
}

model Diet {
  id              String   @id @default(cuid())
  name            String
  description     String
  observations    String   @default("")
  dailyCalories   Int?
  carbsPercentage Int?
  proteinPercentage Int?
  fatPercentage   Int?
  sugarPercentage Int?
  sodiumPercentage Int?

  patients        Patient[]
  meals           Meal[]
}

model Meal {
  id              String    @id @default(cuid())
  name            String
  type            MeatType
  energy          Float
  protein         Float
  carbs           Float
  sugar           Float
  fat             Float
  fiber           Float?
  sodium          Float?
  foodGroup       FoodGroup
  foodSubgroup    String?

  diets           Diet[]

  mealLogs        MealLog[]
}

model MealLog {
  patient         Patient   @relation(fields: [patientId], references: [id])
  patientId       String

  meal            Meal      @relation(fields: [mealId], references: [id])
  mealId          String    

  date            DateTime  @default(now())

  @@id([patientId, mealId, date])
}

model Alarm {
  id              String    @id @default(cuid())
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String

  name        String   
  type        AlarmType
  time        String   
  daysOfWeek  Int[]   
  lastTriggered  DateTime? 
  notes       String? 
}

enum MeatType {
  DESAYUNO
  MEDIAMAÃ‘ANA
  ALMUERZO
  MEDIATARDE
  MERIENDA
  CENA
}

enum FoodGroup {
  CEREALES
  FRUTAS
  VERDURAS
  LACTEOS
  PROTEINAS_ANIMALES
  PROTEINAS_VEGETALES
  GRASAS_SALUDABLES
  AZUCARES
}

enum AlarmType {
  MEDICAMENTO
  SUPLEMENTO
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  timeout  = 10000
}

model User {
  id                        String             @id
  name                      String
  email                     String             @unique
  password                  String
  role                      Role
  picture                   String?
  createdAt                 DateTime           @default(now())
  birthDate                 DateTime
  picturePublicId           String?
  caregiverRequestsSent     CaregiverRequest[] @relation("CaregiverRequests")
  caregiverRequestsReceived CaregiverRequest[] @relation("PatientRequests")
  patientsCare              Patient[]          @relation("CaregiverPatients")
  patientData               Patient?           @relation("PatientUser")
}

model Patient {
  id             String    @id
  name           String
  medicalHistory String    @default("")
  eatingHabits   String    @default("")
  dietId         String?
  caregiverId    String?
  createdAt      DateTime  @default(now())
  gender         String
  height         Float
  weight         Float
  age            Int?
  alarms         Alarm[]
  mealLogs       MealLog[]
  caregiver      User?     @relation("CaregiverPatients", fields: [caregiverId], references: [id])
  diet           Diet?     @relation(fields: [dietId], references: [id])
  user           User      @relation("PatientUser", fields: [id], references: [id])
}

model CaregiverRequest {
  id          String        @id @default(cuid())
  caregiverId String
  patientId   String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  caregiver   User          @relation("CaregiverRequests", fields: [caregiverId], references: [id])
  patient     User          @relation("PatientRequests", fields: [patientId], references: [id])
}

model Diet {
  id           String    @id @default(cuid())
  description  String
  name         String
  observations String    @default("")
  tags         String[]  @default([])
  patients     Patient[]
  meals        Meal[]    @relation("DietToMeal")
}

model Meal {
  id          String      @id @default(cuid())
  fat         Float
  protein     Float
  sugar       Float
  name        String
  type        MeatType
  carbs       Float
  fiber       Float
  foodGroup   FoodGroup
  sodium      Float
  ingredients Json?
  size        PortionSize
  calories    Float
  tags        String[]
  mealLogs    MealLog[]
  diets       Diet[]      @relation("DietToMeal")
}

model MealLog {
  patientId String
  mealId    String
  date      DateTime @default(now())
  meal      Meal     @relation(fields: [mealId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])

  @@id([patientId, mealId, date])
}

model Alarm {
  id            String     @id @default(cuid())
  patientId     String
  name          String
  type          AlarmType
  time          String
  daysOfWeek    Int[]
  notes         String?
  lastTriggered DateTime?
  patient       Patient    @relation(fields: [patientId], references: [id])
  logs          AlarmLog[]
}

model AlarmLog {
  id      String   @id @default(cuid())
  alarmId String
  takenAt DateTime @default(now())
  alarm   Alarm    @relation(fields: [alarmId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  ENDED
}

enum Role {
  PACIENTE
  CUIDADOR
  ESPECIALISTA
}

enum MeatType {
  DESAYUNO
  ALMUERZO
  CENA
  MERIENDA
  MEDIAMANANA @map("MEDIAMAÑANA")
  MEDIATARDE
}

enum FoodGroup {
  CARBOHIDRATOS
  FRUTAS
  VERDURAS
  LACTEOS
  PROTEINAS_ANIMALES
  PROTEINAS_VEGETALES
  GRASAS_SALUDABLES
  AZUCARES
}

enum PortionSize {
  PEQUENA @map("PEQUEÑA")
  MEDIANA
  GRANDE
}

enum AlarmType {
  MEDICAMENTO
  SUPLEMENTO
}

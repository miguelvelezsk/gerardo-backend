// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id
  name             String
  email            String   @unique
  password         String
  birthDate        DateTime
  role             Role
  picture          String?

  patientData      Patient? @relation("PatientUser")
  patientsCare     Patient[] @relation("CaregiverPatients")

  createdAt        DateTime @default(now()) 
}

model Patient {
  id               String   @id
  user             User     @relation("PatientUser", fields: [id], references: [id])
  name             String
  gender           String
  weight           Float
  height           Float

  medicalHistory   String   @default("")
  eatingHabits     String   @default("")

  caregiver        User?    @relation("CaregiverPatients", fields: [caregiverId], references: [id])
  caregiverId      String?

  dietId           String?
  diet             Diet?    @relation(fields: [dietId], references: [id])

  mealLogs        MealLog[]
  alarms          Alarm[]

  createdAt       DateTime  @default(now())
}

model Diet {
  id              String   @id @default(cuid())
  name            String
  description     String
  observations    String   @default("")
  
  tags            String[] @default([])
  patients        Patient[]
  meals           Meal[]
}

model Meal {
  id              String    @id @default(cuid())
  name            String
  type            MeatType
  size            PortionSize
  protein         Float
  carbs           Float
  calories        Float
  sugar           Float
  fat             Float
  fiber           Float
  sodium          Float
  foodGroup       FoodGroup
  tags            String[]
  ingredients     Json?

  diets           Diet[]

  mealLogs        MealLog[]
}

model MealLog {
  patient         Patient   @relation(fields: [patientId], references: [id])
  patientId       String

  meal            Meal      @relation(fields: [mealId], references: [id])
  mealId          String    

  date            DateTime  @default(now())

  @@id([patientId, mealId, date])
}

model Alarm {
  id              String    @id @default(cuid())
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String

  name        String   
  type        AlarmType
  time        String
  daysOfWeek  Int[]
  logs        AlarmLog[]   
  lastTriggered  DateTime? 
  notes       String? 
}

model AlarmLog {
  id          String    @id @default(cuid())
  alarmId     String
  alarm       Alarm     @relation(fields: [alarmId], references: [id])
  takenAt     DateTime  @default(now())
}

enum Role {
  PACIENTE
  CUIDADOR
  ESPECIALISTA
}

enum MeatType {
  DESAYUNO
  MEDIAMAÑANA
  ALMUERZO
  MEDIATARDE
  MERIENDA
  CENA
}

enum FoodGroup {
  CARBOHIDRATOS
  FRUTAS
  VERDURAS
  LACTEOS
  PROTEINAS_ANIMALES
  PROTEINAS_VEGETALES
  GRASAS_SALUDABLES
  AZUCARES
}

enum PortionSize {
  PEQUEÑA
  MEDIANA
  GRANDE
}

enum AlarmType {
  MEDICAMENTO
  SUPLEMENTO
}